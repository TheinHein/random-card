{"version":3,"sources":["Card.js","Deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","angle","Math","random","xCord","yCord","_transform","className","style","transform","this","src","image","alt","value","suit","Component","Deck","state","success","deck_id","cards","code","images","svg","png","remaining","shuffled","getCard","bind","a","axios","get","response","data","setState","url","Error","st","alert","map","card","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mWAwBeA,E,kDArBb,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAMC,EAAwB,GAAhBC,KAAKC,SAAgB,GAC7BC,EAAwB,GAAhBF,KAAKC,SAAgB,GAC7BE,EAAwB,GAAhBH,KAAKC,SAAgB,GAJlB,OAKjB,EAAKG,WAAL,iBAA4BL,EAA5B,0BAAmDG,EAAnD,cAA8DC,EAA9D,OALiB,E,0CAOnB,WACE,OACE,qBACEE,UAAU,OACVC,MAAO,CACLC,UAAWC,KAAKJ,YAElBK,IAAKD,KAAKV,MAAMY,MAChBC,IAAKH,KAAKV,MAAMc,MAAQJ,KAAKV,MAAMe,W,GAhBxBC,aCEbC,G,wDACJ,WAAYjB,GAAQ,IAAD,8BACjB,cAAMA,IACDkB,MAAQ,CACXC,QAAS,KACTC,QAAS,GACTC,MAAO,CACL,CACEC,KAAM,GACNV,MAAO,GACPW,OAAQ,CACNC,IAAK,GACLC,IAAK,IAEPX,MAAO,GACPC,KAAM,KAGVW,UAAW,KACXC,SAAU,IAEZ,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBApBE,E,4FAuBnB,8BAAAC,EAAA,4DAEI,oEAFJ,SAGyBC,IAAMC,IAD3B,qEAFJ,OAGQC,EAHR,OAIUb,EAAYa,EAASC,KAArBd,QACRV,KAAKyB,SAAS,CAAEf,YALlB,gD,kHAOA,oCAAAU,EAAA,sEAEUM,EAFV,kDAE2D1B,KAAKQ,MAAME,QAFtE,2BAG2BW,IAAMC,IAAII,GAHrC,UAGUH,EAHV,SAI0CA,EAASC,KAAvCb,EAJZ,EAIYA,MAAOK,EAJnB,EAImBA,UAJnB,EAI8BP,QAJ9B,sBAMY,IAAIkB,MAAM,qBANtB,OAQI3B,KAAKyB,UAAS,SAACG,GAAD,MAAS,CACrBjB,MAAM,GAAD,mBAAMiB,EAAGjB,OAAT,YAAmBA,IACxBK,UAAWA,MAVjB,kDAaIa,MAAM,EAAD,IAbT,0D,0EAgBA,WACE,OACE,sBAAKhC,UAAU,OAAf,UACE,oBAAIA,UAAU,aAAd,yBACA,oBAAIA,UAAU,sBAAd,uCAEA,qBAAKA,UAAU,gBAAf,SACGG,KAAKQ,MAAMG,MAAMmB,KAAI,SAACC,GAAD,OACpB,cAAC,EAAD,CACE7B,MAAO6B,EAAK7B,MACZE,MAAO2B,EAAK3B,MACZC,KAAM0B,EAAK1B,MACN0B,EAAKnB,WAKhB,wBAAQf,UAAU,cAAcmC,QAAShC,KAAKkB,QAA9C,oC,GAhEWZ,cAwEJC,IClEA0B,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f3a45470.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\";\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    const angle = Math.random() * 90 - 45;\n    const xCord = Math.random() * 40 - 20;\n    const yCord = Math.random() * 40 - 20;\n    this._transform = `rotate(${angle}deg) translate(${xCord}px,${yCord}px)`;\n  }\n  render() {\n    return (\n      <img\n        className=\"Card\"\n        style={{\n          transform: this._transform,\n        }}\n        src={this.props.image}\n        alt={this.props.value + this.props.suit}\n      />\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./Card\";\nimport \"./Deck.css\";\nclass Deck extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      success: null,\n      deck_id: \"\",\n      cards: [\n        {\n          code: \"\",\n          image: \"\",\n          images: {\n            svg: \"\",\n            png: \"\",\n          },\n          value: \"\",\n          suit: \"\",\n        },\n      ],\n      remaining: null,\n      shuffled: \"\",\n    };\n    this.getCard = this.getCard.bind(this);\n  }\n\n  async componentDidMount() {\n    const url =\n      \"https://www.deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\";\n    const response = await axios.get(url);\n    const { deck_id } = response.data;\n    this.setState({ deck_id });\n  }\n  async getCard() {\n    try {\n      const url = `https://www.deckofcardsapi.com/api/deck/${this.state.deck_id}/draw/?count=1`;\n      const response = await axios.get(url);\n      const { cards, remaining, success } = response.data;\n      if (!success) {\n        throw new Error(\"No Card Remaining\");\n      }\n      this.setState((st) => ({\n        cards: [...st.cards, ...cards],\n        remaining: remaining,\n      }));\n    } catch (e) {\n      alert(e);\n    }\n  }\n  render() {\n    return (\n      <div className=\"Deck\">\n        <h1 className=\"Deck-title\">Card Dealer</h1>\n        <h2 className=\"Deck-title subtitle\">A Little Demo Using React</h2>\n\n        <div className=\"Deck-cardArea\">\n          {this.state.cards.map((card) => (\n            <Card\n              image={card.image}\n              value={card.value}\n              suit={card.suit}\n              key={card.code}\n            />\n          ))}\n        </div>\n\n        <button className=\"getCard-btn\" onClick={this.getCard}>\n          Give Me a Card!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Deck;\n","import \"./App.css\";\nimport Deck from \"./Deck\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}